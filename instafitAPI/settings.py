"""
Django settings for instafitAPI project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from django.core.management.utils import get_random_secret_key
import os
import sys
import environ
from datetime import timedelta
from pathlib import Path
import dj_database_url

# from rest_framework_simplejwt.authentication import JWTAuthentication
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    SPACES_ENDPOINT_FULL=(str, ""),
    SPACES_ENDPOINT_EDGE=(str, ""),
    SPACES_KEY=(str, ""),
    SPACES_SECRET=(str, ""),
    BUCKET=(str, ""),
    SENDGRID_API_KEY=(str, ""),
    SENDGRIPD_FROM_EMAIL=(str, ""),
    SECRET_KEY=(str, ""),
    DEV_DB_NAME=(str, ""),
    DEV_DB_USER=(str, ""),
    DEV_DB_PASS=(str, ""),
    DJANGO_ALLOWED_HOSTS=(str, "127.0.0.1,localhost"),
    RUN_ENV=(str, "dev"),
)

environ.Env.read_env()

def cenv(key, d=None):
    """Combined  environments."""
    if key in env:
        return env(key)
    return os.getenv(key, d)

print(cenv("DEVELOPMENT_MODE", "False"))
DEVELOPMENT_MODE = cenv("DEVELOPMENT_MODE", "False")
DEBUG = not cenv("USER", "False") == "DigOc"
print(f"Settings {DEBUG=} {os.getenv('USER')=}")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_random_secret_key()

# ALLOWED_HOSTS = ["10.0.2.2", 'localhost', '127.0.0.1', '192.168.0.159']
ALLOWED_HOSTS = cenv("DJANGO_ALLOWED_HOSTS",
                          "127.0.0.1,localhost").split(",")

FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880 * 2

print(f"{ALLOWED_HOSTS=}")

# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html#settings
# JWT_KEY = env('JWT_SIGNING_KEY') if os.getenv("USER") == "killuh" else os.getenv("JWT_SIGNING_KEY", "")
JWT_KEY = cenv('JWT_SIGNING_KEY')
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=10),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': JWT_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    # 'django.contrib.sessions',
    # 'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',
    'users.apps.UsersConfig',
    'stripeHooks.apps.StripehooksConfig',
    'gyms',
]
# SECURE_SSL_REDIRECT = 0 if DEBUG else 1
# CSRF_COOKIE_SECURE = 0 if DEBUG else 1
# SECURE_HSTS_SECONDS = 60 * 60 * 24 * 1

AUTH_USER_MODEL = 'users.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ]
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # 'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'instafitAPI.middleware.JWTMiddleware',
    'instafitAPI.middleware.TzMiddleware',
    'instafitAPI.middleware.LogMiddleware',
]
AUTHENTICATION_BACKENDS = {
    'users.authBackend.EmailAuth'
}
ROOT_URLCONF = 'instafitAPI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'instafitAPI.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases



print(f"Env user: ", os.getenv("USER"))
print(f"Args: ", sys.argv)
BASE_URL = ""
# Todo Add spot for production when deployed w/ docker.

if os.getenv("USER") == "killuh" and len(sys.argv) > 1 and sys.argv[1] != 'collectstatic' and cenv("RUN_ENV") == "production":  # Need this collectstatic check to avoid erros during build step in DigitalOcean
    if os.getenv("DATABASE_URL", None) is None:
        raise Exception("DATABASE_URL environment variable not defined")
    DATABASES = {
        "default": dj_database_url.parse(os.environ.get("DATABASE_URL")),
    }
    BASE_URL = 'https://fittrackrr.com/api'
elif os.getenv("USER") == "localdocker":
    DATABASES = {
        "default":  {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': env('POSTGRES_NAME'),
            'USER': env('POSTGRES_USER'),
            'PASSWORD':  env('POSTGRES_PASSWORD'),
            'HOST': 'db',
            'PORT': '5432',
        }
    }
    BASE_URL = "http://localhost:8000"
elif os.getenv("USER") == "killuh" or os.getenv("USER") == "chrisandaya":
    DATABASES = {
        "default":  {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': env('DEV_DB_NAME'),
            'USER': env('DEV_DB_USER'),
            'PASSWORD':  env('DEV_DB_PASS'),
            'HOST': '127.0.0.1',
            'PORT': '5432',
        },
        "test": {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': env('DEV_TEST_DB_NAME'),
            'USER': env('DEV_TEST_DB_USER'),
            'PASSWORD':  env('DEV_TEST_DB_PASS'),
            'HOST': '127.0.0.1',
            'PORT': '5432',
        }
    }
    BASE_URL = "http://localhost:8000"

elif os.getenv("USER") == "DigOc" and len(sys.argv) > 1 and sys.argv[1] != 'collectstatic':  # Need this collectstatic check to avoid erros during build step in DigitalOcean
    if cenv("DATABASE_URL", None) is None:
        raise Exception("DATABASE_URL environment variable not defined")
    DATABASES = {
        "default": dj_database_url.parse(cenv("DATABASE_URL")),
    }
    BASE_URL = 'https://starfish-app-r4hzq.ondigitalocean.app'
elif os.getenv("USER") == "DigOc" and len(sys.argv) > 1 and sys.argv[1] != 'collectstatic':  # Need this collectstatic check to avoid erros during build step in DigitalOcean
    if os.getenv("DATABASE_URL", None) is None:
        raise Exception("DATABASE_URL environment variable not defined")
    DATABASES = {
        "default": dj_database_url.parse(os.environ.get("DATABASE_URL")),
    }
    BASE_URL = 'https://starfish-app-r4hzq.ondigitalocean.app'

print(f"using {BASE_URL=}", cenv("RUN_ENV"))
# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# LOGGING = {
#     'version': 1,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django.db.backends': {
#             'level': 'DEBUG',
#         },
#     },
#     'root': {
#         'handlers': ['console'],
#     }
# }

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True
GEOIP_PATH = f'{BASE_DIR}/instafitAPI/GeoLite2-City.mmdb'
print("GEOIP_PATH ", GEOIP_PATH)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

AWS_ACCESS_KEY_ID = env('SPACES_KEY')
AWS_SECRET_ACCESS_KEY = env('SPACES_SECRET')

AWS_STORAGE_BUCKET_NAME = env('BUCKET')
AWS_S3_ENDPOINT_URL = env('SPACES_ENDPOINT_FULL')
AWS_S3_CUSTOM_DOMAIN = env('SPACES_ENDPOINT_EDGE')

AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
AWS_LOCATION = 'static'
AWS_DEFAULT_ACL = 'public-read'

STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# STATIC_URL = '{}/{}/'.format(AWS_S3_ENDPOINT_URL, AWS_LOCATION)

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
